{"version":3,"file":"static/js/544.20ae44b5.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.jsx","pages/Home/Home.jsx","services/API.jsx"],"sourcesContent":["import { useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getDate, getPosterFilm, sliceVoteAverage } from '../../services/API';\nconst MovieList = ({ movies = [] }) => {\n  const location = useLocation();\n\n  if (!movies) {\n    return;\n  }\n\n  return (\n    <ul className=\"mx-auto mb-10 grid justify-center auto-rows-auto grid-cols-3 gap-x-5 gap-y-8 max-w-[1200px]\">\n      {movies.map(({ id, poster_path, title, vote_average, release_date }) => (\n        <div key={id} className=\"w-[385px] cursor-pointer\">\n          <Link\n            className=\"block text-black scale-100 transition-transform duration-300 hover:transition-transform hover:duration-300 hover:scale-110 hover:duration-300 focus:transition-transform focus:scale-110 \"\n            to={`/movies/${id}`}\n            state={{ from: location }}\n          >\n            <img\n              src={getPosterFilm(poster_path)}\n              alt={title}\n              className=\"rounded object-cover w-[385px] h-[574px]\"\n            />\n            <div className=\" flex flex-col items-start pt-3\">\n              <p className=\" text-xl font-bold uppercase mb-1\">{title}</p>\n              <div className=\"flex items-center\">\n                <p>\n                  Vote: {sliceVoteAverage(vote_average)} |{' '}\n                  {getDate(release_date)}\n                </p>\n              </div>\n            </div>\n          </Link>\n        </div>\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string.isRequired,\n      vote_average: PropTypes.number,\n      release_date: PropTypes.string,\n    })\n  ),\n};\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Loader from 'components/Loader/Loader';\nimport MovieList from 'components/MovieList/MovieList';\n\nconst API_KEY = 'eb6a90efbcc57ff077fbac6714044aa1';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getTrendMovies = async () => {\n      try {\n        const response = await axios.get(\n          `/trending/movie/day?api_key=${API_KEY}`\n        );\n        const moviesTrend = response.data.results;\n        setMovies(moviesTrend);\n        setIsLoading(false);\n        return moviesTrend;\n      } catch (error) {\n        setIsLoading(false);\n        console.log('something went wrong', error);\n      }\n    };\n    getTrendMovies();\n  }, []);\n\n  return (\n    <main>\n      <section>\n        {!isLoading && movies.length > 0 && (\n          <>\n            <h1 className=\"text-center mb-5 text-mainColor font-bold text-xl \">\n              Trending movies today\n            </h1>\n            {movies.length > 0 && !isLoading && <MovieList movies={movies} />}\n          </>\n        )}\n      </section>\n      {isLoading && <Loader />}\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n\nconst API_KEY = 'eb6a90efbcc57ff077fbac6714044aa1';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const getFilmById = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    const movieInfo = response.data;\n    return movieInfo;\n  } catch (error) {\n    console.log('Error in getting film by id', error);\n  }\n};\n\nexport const getFilmByKeyWord = async movie => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${movie}`\n    );\n    const searchMovie = response.data.results;\n    return searchMovie;\n  } catch (error) {\n    console.log('Error in getting film by keyword', error);\n  }\n};\n\nexport const getFilmCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    const cast = response.data.cast;\n    return cast;\n  } catch (error) {\n    console.log('Error in getFilmCast', error);\n  }\n};\n\nexport const getFilmReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    console.log('Error in getting film reviews', error);\n  }\n};\n\nexport function getDate(date) {\n  if (date) {\n    const year = date.split('-')[0];\n    return year;\n  }\n}\n\nexport function getPosterFilm(posterPath) {\n  if (posterPath) return `${BASE_IMG_URL}/${posterPath}`;\n  return 'https://www.jsconsulting.kz/assets/img/noImg.jpg';\n}\n\nexport function getGenres(genres) {\n  if (!genres) {\n    return;\n  }\n  const genresName = genres.map(genre => genre.name);\n  return genresName.join(', ');\n}\n\nexport function sliceVoteAverage(voteAverage) {\n  const sliceVoteAverage = parseFloat(voteAverage.toFixed(1));\n  return sliceVoteAverage;\n}\n\nexport function getPercentageValue(voteAverage) {\n  if (!voteAverage) {\n    return;\n  }\n  const sliceVote = sliceVoteAverage(voteAverage);\n  const percentValue = (sliceVote / 10) * 100;\n  const percent = parseFloat(percentValue.toFixed(1));\n  return `${percent}%`;\n}\n"],"names":["movies","location","useLocation","className","map","id","poster_path","title","vote_average","release_date","to","state","from","src","getPosterFilm","alt","sliceVoteAverage","getDate","axios","useState","setMovies","isLoading","setIsLoading","useEffect","getTrendMovies","response","moviesTrend","data","results","console","log","length","API_KEY","getFilmById","movieId","movieInfo","getFilmByKeyWord","movie","searchMovie","getFilmCast","cast","getFilmReviews","reviews","date","split","posterPath","getGenres","genres","genre","name","join","voteAverage","parseFloat","toFixed","getPercentageValue","sliceVote","percent"],"sourceRoot":""}