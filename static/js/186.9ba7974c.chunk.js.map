{"version":3,"file":"static/js/186.9ba7974c.chunk.js","mappings":"wMAgDA,UA3CgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCH,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAiBA,IAfAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,GACb,IAAME,EAAU,mCAAG,8GAEOC,EAAAA,EAAAA,IAAeN,GAFtB,OAETF,EAFS,OAGfC,EAAWD,GACXK,GAAa,GAJE,gDAMfA,EAAa,mBAAD,MANG,yDAAH,qDAUhBE,GACD,GAAE,CAACL,IAECF,EAGL,OACE,4BACII,GAAaJ,EAAQS,OAAS,IAC9B,eAAIC,UAAU,sBAAd,SACGV,EAAQW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,gBAAIJ,UAAU,6BAAd,WACE,eAAGA,UAAU,mBAAb,qBAAyCG,MACzC,cAAGH,UAAU,gBAAb,SAA8BI,MAFgBF,EADrC,MAQhBR,IAAa,SAAC,IAAD,IACM,IAAnBJ,EAAQS,SAAiBL,IACxB,mEAIP,C,+RC5CKW,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAEaC,EAAW,mCAAG,WAAMf,GAAN,kGAEAc,EAAAA,EAAAA,IAAA,iBAAoBd,EAApB,oBAAuCa,IAFvC,cAEjBG,EAFiB,OAGjBC,EAAYD,EAASE,KAHJ,kBAIhBD,GAJgB,gCAMvBE,QAAQC,IAAI,8BAAZ,MANuB,yDAAH,sDAUXC,EAAgB,mCAAG,WAAMC,GAAN,kGAELR,EAAAA,EAAAA,IAAA,gCACID,EADJ,kBACqBS,IAHhB,cAEtBN,EAFsB,OAKtBO,EAAcP,EAASE,KAAKM,QALN,kBAMrBD,GANqB,gCAQ5BJ,QAAQC,IAAI,mCAAZ,MAR4B,yDAAH,sDAYhBK,EAAW,mCAAG,WAAMzB,GAAN,kGAEAc,EAAAA,EAAAA,IAAA,iBACXd,EADW,4BACgBa,IAHhB,cAEjBG,EAFiB,OAKjBU,EAAOV,EAASE,KAAKQ,KALJ,kBAMhBA,GANgB,gCAQvBP,QAAQC,IAAI,uBAAZ,MARuB,yDAAH,sDAYXd,EAAc,mCAAG,WAAMN,GAAN,kGAEHc,EAAAA,EAAAA,IAAA,iBACXd,EADW,4BACgBa,IAHb,cAEpBG,EAFoB,OAMpBlB,EAAUkB,EAASE,KAAKM,QANJ,kBAOnB1B,GAPmB,gCAS1BqB,QAAQC,IAAI,gCAAZ,MAT0B,yDAAH,sDAapB,SAASO,EAAQC,GACtB,GAAIA,EAEF,OADaA,EAAKC,MAAM,KAAK,EAGhC,CAEM,SAASC,EAAcC,GAC5B,OAAIA,EAAkB,GAAN,OAzDG,kCAyDH,YAA0BA,GACnC,kDACR,CAEM,SAASC,EAAUC,GACxB,GAAKA,EAIL,OADmBA,EAAOxB,KAAI,SAAAyB,GAAK,OAAIA,EAAMC,IAAV,IACjBC,KAAK,KACxB,CAEM,SAASC,EAAiBC,GAE/B,OADyBC,WAAWD,EAAYE,QAAQ,GAEzD,CAEM,SAASC,EAAmBH,GACjC,GAAKA,EAAL,CAGA,IAAMI,EAAYL,EAAiBC,GAE7BK,EAAUJ,YADMG,EAAY,GAAM,KACAF,QAAQ,IAChD,MAAM,GAAN,OAAUG,EAAV,IAJC,CAKF,C","sources":["components/Reviews/Reviews.jsx","services/API.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getFilmReviews } from 'services/API';\nimport Loader from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getReviews = async () => {\n      try {\n        const reviews = await getFilmReviews(movieId);\n        setReviews(reviews);\n        setIsLoading(false);\n      } catch (e) {\n        setIsLoading('Error in Reviews', e);\n      }\n    };\n\n    getReviews();\n  }, [movieId]);\n\n  if (!reviews) {\n    return;\n  }\n  return (\n    <div>\n      {!isLoading && reviews.length > 0 && (\n        <ul className=\"flex flex-col gap-5\">\n          {reviews.map(({ id, author, content }) => (\n            <li className=\"shadow-reviews p-5 rounded\" key={id}>\n              <p className=\"font-bold mb-2.5\">Author: {author}</p>\n              <p className=\" text-justify\">{content}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {isLoading && <Loader />}\n      {reviews.length === 0 && !isLoading && (\n        <div>Sorry.. there are still no reviews </div>\n      )}\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst API_KEY = 'eb6a90efbcc57ff077fbac6714044aa1';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const getFilmById = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    const movieInfo = response.data;\n    return movieInfo;\n  } catch (error) {\n    console.log('Error in getting film by id', error);\n  }\n};\n\nexport const getFilmByKeyWord = async movie => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${movie}`\n    );\n    const searchMovie = response.data.results;\n    return searchMovie;\n  } catch (error) {\n    console.log('Error in getting film by keyword', error);\n  }\n};\n\nexport const getFilmCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    const cast = response.data.cast;\n    return cast;\n  } catch (error) {\n    console.log('Error in getFilmCast', error);\n  }\n};\n\nexport const getFilmReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    console.log('Error in getting film reviews', error);\n  }\n};\n\nexport function getDate(date) {\n  if (date) {\n    const year = date.split('-')[0];\n    return year;\n  }\n}\n\nexport function getPosterFilm(posterPath) {\n  if (posterPath) return `${BASE_IMG_URL}/${posterPath}`;\n  return 'https://www.jsconsulting.kz/assets/img/noImg.jpg';\n}\n\nexport function getGenres(genres) {\n  if (!genres) {\n    return;\n  }\n  const genresName = genres.map(genre => genre.name);\n  return genresName.join(', ');\n}\n\nexport function sliceVoteAverage(voteAverage) {\n  const sliceVoteAverage = parseFloat(voteAverage.toFixed(1));\n  return sliceVoteAverage;\n}\n\nexport function getPercentageValue(voteAverage) {\n  if (!voteAverage) {\n    return;\n  }\n  const sliceVote = sliceVoteAverage(voteAverage);\n  const percentValue = (sliceVote / 10) * 100;\n  const percent = parseFloat(percentValue.toFixed(1));\n  return `${percent}%`;\n}\n"],"names":["useState","reviews","setReviews","movieId","useParams","isLoading","setIsLoading","useEffect","getReviews","getFilmReviews","length","className","map","id","author","content","API_KEY","axios","getFilmById","response","movieInfo","data","console","log","getFilmByKeyWord","movie","searchMovie","results","getFilmCast","cast","getDate","date","split","getPosterFilm","posterPath","getGenres","genres","genre","name","join","sliceVoteAverage","voteAverage","parseFloat","toFixed","getPercentageValue","sliceVote","percent"],"sourceRoot":""}