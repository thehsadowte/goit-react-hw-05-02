{"version":3,"file":"static/js/833.2fa33f21.chunk.js","mappings":"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","sources":["components/FilmCardDetails/FilmCardDetails.jsx","components/AdditionalInfo/AdditionalInfo.jsx","pages/MovieDetails/MovieDetails.jsx","services/API.jsx"],"sourcesContent":["import {\n  getPosterFilm,\n  getGenres,\n  getDate,\n  getPercentageValue,\n} from 'services/API';\nimport PropTypes from 'prop-types';\n\nimport React from 'react';\n\nconst FilmCardDetails = ({ movie }) => {\n  const { title, poster_path, release_date, overview, genres, vote_average } =\n    movie;\n\n  return (\n    <div className=\"flex mb-5\">\n      <img\n        src={getPosterFilm(poster_path)}\n        alt={title}\n        className=\"rounded object-cover w-[385px] h-[574px]\"\n      />\n      <div className=\"ml-5\">\n        <h1 className=\"text-xl font-bold uppercase mb-2.5 \">\n          {title} ({getDate(release_date)})\n        </h1>\n        <p className=\"text-base font-bold mb-2.5\">\n          User Score:{' '}\n          <span className=\"text-base font-normal\">\n            {vote_average && getPercentageValue(vote_average)}\n          </span>\n        </p>\n        <p className=\"text-base font-bold mb-2.5\">Overview</p>\n        <p className=\"text-base mb-2.5 font-normal text-justify w-[450px]\">\n          {overview}\n        </p>\n        <p className=\"text-base font-bold mb-2.5\">\n          Genres:\n          <span className=\"text-base font-normal\">{getGenres(genres)}</span>\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default FilmCardDetails;\n\nFilmCardDetails.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    poster_path: PropTypes.string,\n    release_date: PropTypes.string,\n    overview: PropTypes.string,\n    genres: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n      })\n    ),\n    vote_average: PropTypes.number,\n  }),\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst AdditionalInfo = backLinkHref => {\n  return (\n    <div className=\"mb-5 mx-auto mt-0 text-center \">\n      <h2 className=\"mb-2.5 font-mono font-bold text-lg \">\n        Additional Information\n      </h2>\n      <ul className=\"flex justify-center gap-[100px]\">\n        <li>\n          <Link\n            to=\"cast\"\n            state={{ from: backLinkHref }}\n            className=\"px-6 py-2 no-underline rounded text-mainColor font-bold block min-w-[100px] bg-yellow-400 transition-colors duration-300 active:text-white active:bg-orange-600 hover:text-white hover:bg-orange-600\"\n          >\n            Cast\n          </Link>\n        </li>\n        <li>\n          <Link\n            to=\"reviews\"\n            state={{ from: backLinkHref }}\n            className=\"px-6 py-2 no-underline text-mainColor rounded font-bold block min-w-[100px] bg-yellow-400 transition-colors duration-300 active:text-white active:bg-orange-600 hover:text-white hover:bg-orange-600\"\n          >\n            Reviews\n          </Link>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default AdditionalInfo;\n\nAdditionalInfo.propTypes = {\n  backLinkHref: PropTypes.shape({\n    state: PropTypes.shape({}),\n  }),\n};\n","import { useState, useEffect, Suspense } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { Outlet } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport { getFilmById } from 'services/API';\nimport { Link } from 'react-router-dom';\nimport FilmCardDetails from 'components/FilmCardDetails/FilmCardDetails';\nimport AdditionalInfo from 'components/AdditionalInfo/AdditionalInfo';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getMovieInfo = async () => {\n      try {\n        const movieInfo = await getFilmById(movieId);\n        setMovie(movieInfo);\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoading(false);\n        console.log('Error in MovieDetails', error);\n      }\n    };\n    getMovieInfo();\n  }, [movieId]);\n\n  if (movie.length === 0) {\n    return;\n  }\n\n  return (\n    <main>\n      {!isLoading && (\n        <section className=\"p-0 pb-[60px] \">\n          <Link\n            to={backLinkHref}\n            className=\"flex justify-between transition-colors duration-300 items-center p-2.5 bg-yellow-400 mb-5 max-w-[110px] rounded font-bold text-mainColor text-center hover:bg-orange-600 hover:text-white\"\n          >\n            Go Back\n          </Link>\n          <FilmCardDetails movie={movie} />\n          <AdditionalInfo backLinkHref={backLinkHref} />\n          <Suspense fallback={<Loader />}>\n            <Outlet />\n          </Suspense>\n        </section>\n      )}\n      {isLoading && <Loader />}\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\nconst API_KEY = 'eb6a90efbcc57ff077fbac6714044aa1';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const getFilmById = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    const movieInfo = response.data;\n    return movieInfo;\n  } catch (error) {\n    console.log('Error in getting film by id', error);\n  }\n};\n\nexport const getFilmByKeyWord = async movie => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${movie}`\n    );\n    const searchMovie = response.data.results;\n    return searchMovie;\n  } catch (error) {\n    console.log('Error in getting film by keyword', error);\n  }\n};\n\nexport const getFilmCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    const cast = response.data.cast;\n    return cast;\n  } catch (error) {\n    console.log('Error in getFilmCast', error);\n  }\n};\n\nexport const getFilmReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    console.log('Error in getting film reviews', error);\n  }\n};\n\nexport function getDate(date) {\n  if (date) {\n    const year = date.split('-')[0];\n    return year;\n  }\n}\n\nexport function getPosterFilm(posterPath) {\n  if (posterPath) return `${BASE_IMG_URL}/${posterPath}`;\n  return 'https://www.jsconsulting.kz/assets/img/noImg.jpg';\n}\n\nexport function getGenres(genres) {\n  if (!genres) {\n    return;\n  }\n  const genresName = genres.map(genre => genre.name);\n  return genresName.join(', ');\n}\n\nexport function sliceVoteAverage(voteAverage) {\n  const sliceVoteAverage = parseFloat(voteAverage.toFixed(1));\n  return sliceVoteAverage;\n}\n\nexport function getPercentageValue(voteAverage) {\n  if (!voteAverage) {\n    return;\n  }\n  const sliceVote = sliceVoteAverage(voteAverage);\n  const percentValue = (sliceVote / 10) * 100;\n  const percent = parseFloat(percentValue.toFixed(1));\n  return `${percent}%`;\n}\n"],"names":["movie","title","poster_path","release_date","overview","genres","vote_average","className","src","getPosterFilm","alt","getDate","getPercentageValue","getGenres","backLinkHref","to","state","from","movieId","useParams","useState","setMovie","isLoading","setIsLoading","useLocation","useEffect","getMovieInfo","getFilmById","movieInfo","console","log","length","Suspense","fallback","Loader","API_KEY","axios","response","data","getFilmByKeyWord","searchMovie","results","getFilmCast","cast","getFilmReviews","reviews","date","split","posterPath","map","genre","name","join","sliceVoteAverage","voteAverage","parseFloat","toFixed","sliceVote","percent"],"sourceRoot":""}