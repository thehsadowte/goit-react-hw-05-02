{"version":3,"file":"static/js/853.14ad1033.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.jsx","components/Search/Search.jsx","pages/Movies/Movies.jsx","services/API.jsx"],"sourcesContent":["import { useLocation } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { getDate, getPosterFilm, sliceVoteAverage } from '../../services/API';\nconst MovieList = ({ movies = [] }) => {\n  const location = useLocation();\n\n  if (!movies) {\n    return;\n  }\n\n  return (\n    <ul className=\"mx-auto mb-10 grid justify-center auto-rows-auto grid-cols-3 gap-x-5 gap-y-8 max-w-[1200px]\">\n      {movies.map(({ id, poster_path, title, vote_average, release_date }) => (\n        <div key={id} className=\"w-[385px] cursor-pointer\">\n          <Link\n            className=\"block text-black scale-100 transition-transform duration-300 hover:transition-transform hover:duration-300 hover:scale-110 hover:duration-300 focus:transition-transform focus:scale-110 \"\n            to={`/movies/${id}`}\n            state={{ from: location }}\n          >\n            <img\n              src={getPosterFilm(poster_path)}\n              alt={title}\n              className=\"rounded object-cover w-[385px] h-[574px]\"\n            />\n            <div className=\" flex flex-col items-start pt-3\">\n              <p className=\" text-xl font-bold uppercase mb-1\">{title}</p>\n              <div className=\"flex items-center\">\n                <p>\n                  Vote: {sliceVoteAverage(vote_average)} |{' '}\n                  {getDate(release_date)}\n                </p>\n              </div>\n            </div>\n          </Link>\n        </div>\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n\nMovieList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string.isRequired,\n      vote_average: PropTypes.number,\n      release_date: PropTypes.string,\n    })\n  ),\n};\n","import { useState } from 'react';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Search = ({ onUpdateQuery, value }) => {\n  const [query, setQuery] = useState(value ? value : '');\n\n  const onChange = event => setQuery(event.target.value);\n\n  const onSubmit = event => {\n    event.preventDefault();\n    onUpdateQuery(query.trim());\n  };\n\n  return (\n    <form\n      className=\"flex items-center justify-center rounded overflow-hidden bg-orange-600 p-3 mb-5 shadow-md\"\n      onSubmit={onSubmit}\n    >\n      <input\n        type=\"text\"\n        name=\"query\"\n        value={query}\n        onChange={onChange}\n        placeholder=\"Find the movie...\"\n        className=\"w-[385px] font-mono text-lg border-none rounded outline-none py-2 px-4 placeholder:font-mono text-sm\"\n      />\n      <button\n        type=\"submit\"\n        className=\"mx-5 py-1.5 w-[150px] bg-zinc-800 text-orange-700 rounded cursor-pointer transition-colors duration-300 hover:bg-red-800 hover:text-white hover:border-solid hover: border-mainColor\"\n      >\n        Search\n      </button>\n    </form>\n  );\n};\n\nexport default Search;\n\nSearch.propTypes = {\n  onUpdateQuery: PropTypes.func.isRequired,\n  value: PropTypes.string,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Search from 'components/Search/Search';\nimport MovieList from 'components/MovieList/MovieList';\nimport Loader from 'components/Loader/Loader';\nimport { getFilmByKeyWord } from 'services/API';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const movie = searchParams.get('query') ?? '';\n\n  const updateQueryStr = query => {\n    const searchMovie = query !== '' ? { query } : {};\n    setSearchParams(searchMovie);\n  };\n\n  useEffect(() => {\n    if (!movie) {\n      return;\n    }\n    setIsLoading(true);\n    const getMovie = async () => {\n      try {\n        const movieFound = await getFilmByKeyWord(movie);\n        setMovies(movieFound);\n        setIsLoading(false);\n      } catch (e) {\n        setIsLoading(false);\n        console.log('Error in MovieSearch', e);\n      }\n    };\n    getMovie();\n  }, [movie]);\n  return (\n    <main>\n      <section>\n        <Search onUpdateQuery={updateQueryStr} value={movie} />\n        {movies.length > 0 && !isLoading && <MovieList movies={movies} />}\n        {isLoading && <Loader />}\n        {!isLoading && movie && movie.length === 0 && (\n          <div>Sorry we cannot find any movie</div>\n        )}\n      </section>\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst API_KEY = 'eb6a90efbcc57ff077fbac6714044aa1';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const getFilmById = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    const movieInfo = response.data;\n    return movieInfo;\n  } catch (error) {\n    console.log('Error in getting film by id', error);\n  }\n};\n\nexport const getFilmByKeyWord = async movie => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${movie}`\n    );\n    const searchMovie = response.data.results;\n    return searchMovie;\n  } catch (error) {\n    console.log('Error in getting film by keyword', error);\n  }\n};\n\nexport const getFilmCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    const cast = response.data.cast;\n    return cast;\n  } catch (error) {\n    console.log('Error in getFilmCast', error);\n  }\n};\n\nexport const getFilmReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    console.log('Error in getting film reviews', error);\n  }\n};\n\nexport function getDate(date) {\n  if (date) {\n    const year = date.split('-')[0];\n    return year;\n  }\n}\n\nexport function getPosterFilm(posterPath) {\n  if (posterPath) return `${BASE_IMG_URL}/${posterPath}`;\n  return 'https://www.jsconsulting.kz/assets/img/noImg.jpg';\n}\n\nexport function getGenres(genres) {\n  if (!genres) {\n    return;\n  }\n  const genresName = genres.map(genre => genre.name);\n  return genresName.join(', ');\n}\n\nexport function sliceVoteAverage(voteAverage) {\n  const sliceVoteAverage = parseFloat(voteAverage.toFixed(1));\n  return sliceVoteAverage;\n}\n\nexport function getPercentageValue(voteAverage) {\n  if (!voteAverage) {\n    return;\n  }\n  const sliceVote = sliceVoteAverage(voteAverage);\n  const percentValue = (sliceVote / 10) * 100;\n  const percent = parseFloat(percentValue.toFixed(1));\n  return `${percent}%`;\n}\n"],"names":["movies","location","useLocation","className","map","id","poster_path","title","vote_average","release_date","to","state","from","src","getPosterFilm","alt","sliceVoteAverage","getDate","onUpdateQuery","value","useState","query","setQuery","onSubmit","event","preventDefault","trim","type","name","onChange","target","placeholder","setMovies","isLoading","setIsLoading","useSearchParams","searchParams","setSearchParams","movie","get","useEffect","getMovie","getFilmByKeyWord","movieFound","console","log","length","MovieList","Loader","API_KEY","axios","getFilmById","movieId","response","movieInfo","data","searchMovie","results","getFilmCast","cast","getFilmReviews","reviews","date","split","posterPath","getGenres","genres","genre","join","voteAverage","parseFloat","toFixed","getPercentageValue","sliceVote","percent"],"sourceRoot":""}