{"version":3,"file":"static/js/247.61184697.chunk.js","mappings":"wMAoDA,UA9Ca,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAiBR,IAfAE,EAAAA,EAAAA,YAAU,WACRH,GAAa,GACb,IAAMI,EAAO,mCAAG,8GAEOC,EAAAA,EAAAA,IAAYJ,GAFnB,OAENJ,EAFM,OAGZC,EAAQD,GACRG,GAAa,GAJD,gDAMZA,GAAa,GACbM,QAAQC,IAAI,qBAAZ,MAPY,yDAAH,qDAUbH,GACD,GAAE,CAACH,IAECJ,EAIL,OACE,4BACIE,GAAaF,EAAKW,OAAS,IAC3B,eAAIC,UAAU,mGAAd,SACGZ,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,KAAMC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,aAA7B,OACR,gBAAIL,UAAU,mCAAd,WACE,gBACEM,KAAKC,EAAAA,EAAAA,IAAcF,GACnBG,IAAKL,EACLH,UAAU,yDAEZ,eAAGA,UAAU,oBAAb,wBAA6CI,OANOF,EAD9C,MAYbZ,IAAa,SAAC,IAAD,IACG,IAAhBF,EAAKW,SAAiBT,IAAa,oDAGzC,C,+RChDKmB,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAEaC,EAAW,mCAAG,WAAMnB,GAAN,kGAEAkB,EAAAA,EAAAA,IAAA,iBAAoBlB,EAApB,oBAAuCiB,IAFvC,cAEjBG,EAFiB,OAGjBC,EAAYD,EAASE,KAHJ,kBAIhBD,GAJgB,gCAMvBhB,QAAQC,IAAI,8BAAZ,MANuB,yDAAH,sDAUXiB,EAAgB,mCAAG,WAAMC,GAAN,kGAELN,EAAAA,EAAAA,IAAA,gCACID,EADJ,kBACqBO,IAHhB,cAEtBJ,EAFsB,OAKtBK,EAAcL,EAASE,KAAKI,QALN,kBAMrBD,GANqB,gCAQ5BpB,QAAQC,IAAI,mCAAZ,MAR4B,yDAAH,sDAYhBF,EAAW,mCAAG,WAAMJ,GAAN,kGAEAkB,EAAAA,EAAAA,IAAA,iBACXlB,EADW,4BACgBiB,IAHhB,cAEjBG,EAFiB,OAKjBxB,EAAOwB,EAASE,KAAK1B,KALJ,kBAMhBA,GANgB,gCAQvBS,QAAQC,IAAI,uBAAZ,MARuB,yDAAH,sDAYXqB,EAAc,mCAAG,WAAM3B,GAAN,kGAEHkB,EAAAA,EAAAA,IAAA,iBACXlB,EADW,4BACgBiB,IAHb,cAEpBG,EAFoB,OAMpBQ,EAAUR,EAASE,KAAKI,QANJ,kBAOnBE,GAPmB,gCAS1BvB,QAAQC,IAAI,gCAAZ,MAT0B,yDAAH,sDAapB,SAASuB,EAAQC,GACtB,GAAIA,EAEF,OADaA,EAAKC,MAAM,KAAK,EAGhC,CAEM,SAAShB,EAAciB,GAC5B,OAAIA,EAAkB,GAAN,OAzDG,kCAyDH,YAA0BA,GACnC,kDACR,CAEM,SAASC,EAAUC,GACxB,GAAKA,EAIL,OADmBA,EAAOzB,KAAI,SAAA0B,GAAK,OAAIA,EAAMxB,IAAV,IACjByB,KAAK,KACxB,CAEM,SAASC,EAAiBC,GAE/B,OADyBC,WAAWD,EAAYE,QAAQ,GAEzD,CAEM,SAASC,EAAmBH,GACjC,GAAKA,EAAL,CAGA,IAAMI,EAAYL,EAAiBC,GAE7BK,EAAUJ,YADMG,EAAY,GAAM,KACAF,QAAQ,IAChD,MAAM,GAAN,OAAUG,EAAV,IAJC,CAKF,C","sources":["components/Cast/Cast.jsx","services/API.jsx"],"sourcesContent":["import Loader from 'components/Loader/Loader';\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPosterFilm, getFilmCast } from 'services/API';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getCast = async () => {\n      try {\n        const cast = await getFilmCast(movieId);\n        setCast(cast);\n        setIsLoading(false);\n      } catch (e) {\n        setIsLoading(false);\n        console.log('Error in the Cast ', e);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  if (!cast) {\n    return;\n  }\n\n  return (\n    <div>\n      {!isLoading && cast.length > 0 && (\n        <ul className=\"mx-auto mb-10 grid justify-center auto-rows-auto grid-cols-3 gap-y-8 gap-x-[22px] max-w-[1200px]\">\n          {cast.map(({ cast_id, name, character, profile_path }) => (\n            <li className=\"flex flex-col items-center gap-2\" key={cast_id}>\n              <img\n                src={getPosterFilm(profile_path)}\n                alt={name}\n                className=\"rounded object-cover object-top w-[385px] h-[470px]\"\n              />\n              <p className=\"text-lg font-bold\">Character: {character}</p>\n            </li>\n          ))}\n        </ul>\n      )}\n      {isLoading && <Loader />}\n      {cast.length === 0 && !isLoading && <div>Can't find the actor</div>}\n    </div>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'eb6a90efbcc57ff077fbac6714044aa1';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const getFilmById = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    const movieInfo = response.data;\n    return movieInfo;\n  } catch (error) {\n    console.log('Error in getting film by id', error);\n  }\n};\n\nexport const getFilmByKeyWord = async movie => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${movie}`\n    );\n    const searchMovie = response.data.results;\n    return searchMovie;\n  } catch (error) {\n    console.log('Error in getting film by keyword', error);\n  }\n};\n\nexport const getFilmCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    const cast = response.data.cast;\n    return cast;\n  } catch (error) {\n    console.log('Error in getFilmCast', error);\n  }\n};\n\nexport const getFilmReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    console.log('Error in getting film reviews', error);\n  }\n};\n\nexport function getDate(date) {\n  if (date) {\n    const year = date.split('-')[0];\n    return year;\n  }\n}\n\nexport function getPosterFilm(posterPath) {\n  if (posterPath) return `${BASE_IMG_URL}/${posterPath}`;\n  return 'https://www.jsconsulting.kz/assets/img/noImg.jpg';\n}\n\nexport function getGenres(genres) {\n  if (!genres) {\n    return;\n  }\n  const genresName = genres.map(genre => genre.name);\n  return genresName.join(', ');\n}\n\nexport function sliceVoteAverage(voteAverage) {\n  const sliceVoteAverage = parseFloat(voteAverage.toFixed(1));\n  return sliceVoteAverage;\n}\n\nexport function getPercentageValue(voteAverage) {\n  if (!voteAverage) {\n    return;\n  }\n  const sliceVote = sliceVoteAverage(voteAverage);\n  const percentValue = (sliceVote / 10) * 100;\n  const percent = parseFloat(percentValue.toFixed(1));\n  return `${percent}%`;\n}\n"],"names":["useState","cast","setCast","isLoading","setIsLoading","movieId","useParams","useEffect","getCast","getFilmCast","console","log","length","className","map","cast_id","name","character","profile_path","src","getPosterFilm","alt","API_KEY","axios","getFilmById","response","movieInfo","data","getFilmByKeyWord","movie","searchMovie","results","getFilmReviews","reviews","getDate","date","split","posterPath","getGenres","genres","genre","join","sliceVoteAverage","voteAverage","parseFloat","toFixed","getPercentageValue","sliceVote","percent"],"sourceRoot":""}